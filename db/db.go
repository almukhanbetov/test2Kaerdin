package db

import (
	"context"
	"log"
	"os"
	"time"

	"github.com/jmoiron/sqlx"
	_ "github.com/jackc/pgx/v5/stdlib"
)

var DB *sqlx.DB

func InitDB(){
	dsn := os.Getenv("DB_URL")
	if dsn == "" {
		log.Fatal("‚ùå DB_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
	}
	var err error
	DB, err = sqlx.Open("pgx", dsn)
	if err!=nil{
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	DB.SetMaxOpenConns(25)
	DB.SetMaxIdleConns(25)
	DB.SetConnMaxLifetime(5 * time.Minute)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err:=DB.PingContext(ctx); err!=nil{
		log.Fatalf("‚ùå –ü–∏–Ω–≥ –ë–î –Ω–µ –ø—Ä–æ—à—ë–ª: %v", err)
	}
	log.Println("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
}

func CloseDB(){
	if DB !=nil{
		if err:=DB.Close();err!=nil{
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: %v", err)
		}else{
			log.Println("üõë –ë–î —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
		}
	}
}